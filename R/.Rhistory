# 0 (Not Hispanic), 1 (Mexican), 2 (Puerto Rican), 3 (Cuban), 4 (Other)
salaries <- transform(salaries, HISPAN = case_when(
HISPAN == 0 ~ 'NonHisp',
HISPAN == 1 ~ 'Mexican',
HISPAN == 2 ~ 'PuertoRican',
HISPAN == 3 ~ 'Cuban',
HISPAN == 4 ~ 'Other',
TRUE   ~ as.character(HISPAN)
))
salaries$HISPAN <- factor(salaries$HISPAN )
# region
salaries <- transform(salaries, REGION = case_when(
REGION == 1 ~ 'Northeast',
REGION == 2 ~ 'Midwest',
REGION == 3 ~ 'South',
REGION == 4 ~ 'West',
TRUE   ~ as.character(HISPAN)
))
salaries$REGION <- factor(salaries$REGION )
# marital status
salaries <- transform(salaries, MAR = case_when(
MAR == 1 ~ 'Married',
MAR == 2 ~ 'Widowed',
MAR == 3 ~ 'Divorced',
MAR == 4 ~ 'Separated',
MAR == 5 ~ 'Never Married',
TRUE   ~ as.character(MAR)
))
salaries$MAR <- factor(salaries$MAR )
# education
salaries <- transform(salaries, EDUCD = case_when(
EDUCD <62  ~ '<HS',
EDUCD >= 62 & EDUCD <=64 ~ 'HS',
EDUCD >= 65 & EDUCD <=71  ~ 'Some',
EDUCD >=80 & EDUCD <=90  ~ 'Assoc',
EDUCD == 100 | EDUCD ==101  ~ 'BA',
EDUCD >=110 & EDUCD <= 116  ~ 'Adv',
TRUE   ~ as.character(RACE)
))
salaries$EDUCD <- factor(salaries$EDUCD)
# age groupings
salaries <- transform(salaries, AGE = case_when(
AGE >=16 & AGE <= 25   ~ '18-25',
AGE >=26 & AGE <= 40   ~ '26-40',
AGE >=41 & AGE <= 60   ~ '41-60',
AGE > 60 ~'>= 61',
TRUE   ~ as.character(RACE)
))
salaries$AGE <- factor(salaries$AGE)
salaries$AGE2 = salariesOrg[,'AGE']  #original numeric value
# poverty recode :
salaries <- transform(salaries, POVPIP = case_when(
(POVPIP < 150 | PAP > 0 )  ~ 1,
TRUE ~ as.numeric(as.character(0))
))
salaries$POVPIP <- factor(salaries$POVPIP)
salaries$POVPIP2 <- salariesOrg[, 'POVPIP'] #original numeric value
# heath coverage: 1= insured, 2 = not insured
salaries$HICOV <- factor(salaries$HICOV )
#race and ethnicity cross-tabs
addmargins(with(salaries, table(salaries$RACE, salaries$HISPAN, dnn = c('race', 'ethnicity'))))
# add hispanic to race
salaries <- transform(salaries, RACE = case_when(
(RACE=='White' & HISPAN=='Cuban') ~ 'Hisp',      #'Cuban',
(RACE=='Other' & HISPAN=='Cuban') ~ 'Hisp',      #'Cuban',
(RACE=='Asian' & HISPAN=='Cuban') ~ 'Hisp',      #'Cuban',
(RACE=='White' & HISPAN=='Mexican') ~ 'Hisp',    #'Mexican',
(RACE=='Other' & HISPAN=='Mexican')  ~ 'Hisp',   #'Mexican',
(RACE=='NativeAm' & HISPAN=='Mexican') ~ 'Hisp', #'Mexican',
(RACE=='Black' & HISPAN=='Mexican') ~ 'Hisp',    #'Mexican',
(RACE=='Asian' & HISPAN=='Mexican') ~ 'Hisp',    #'Mexican',
(RACE=='White' & HISPAN=='PuertoRican') ~ 'Hisp',   #'PuertoRican',
(RACE=='Other' & HISPAN=='PuertoRican') ~ 'Hisp',   #'PuertoRican',
(RACE=='Black' & HISPAN=='PuertoRican') ~ 'Hisp',   #'PuertoRican',
(RACE=='Asian' & HISPAN=='PuertoRican') ~ 'Hisp',   #'PuertoRican',
TRUE   ~ as.character(RACE)
))
salaries$RACE <- factor(salaries$RACE)
###  subsets of interest ###
females =  subset(salaries, SEX=='Female')
males =  subset(salaries, SEX=='Male')
whiteRace = (salaries[, 'RACE'] == 'White')
white = subset(salaries, RACE=='White')
nonwhite = subset(salaries, !whiteRace)
college = subset(salaries, EDUCD=='BA' | EDUCD=='Adv')
some = subset(salaries, EDUCD=='Some' | EDUCD=='Assoc')
none = subset(salaries, EDUCD=='<HS' | EDUCD=='HS')
# income by gender
incomeF = females$INCWAGE
incomeM = males$INCWAGE
incomeNoF = subset(females, EDUCD!='BA' & EDUCD!='Adv')$INCWAGE
incomeNoM = subset(males, EDUCD!='BA' & EDUCD!='Adv')$INCWAGE
incomeColF = subset(females, EDUCD=='BA' | EDUCD=='Adv')$INCWAGE
incomeColM = subset(males, EDUCD=='BA' | EDUCD=='Adv')$INCWAGE
#print(head(salaries, 3))
#race and ethnicity cross-tabs
addmargins(with(salaries, table(salaries$RACE, salaries$HISPAN, dnn = c('race', 'ethnicity'))))
suppressPackageStartupMessages(library(gridExtra))
# population by region
p1= countHist (xval=salaries$REGION, maintitle='Regional Makeup')
# by gender
p2=countHist (xval=salaries$SEX, maintitle='Gender Makeup')
#  by race
p3=countHist (xval=salaries$RACE, maintitle='Racial Makeup')
grid.arrange(p1, p2,p3, ncol=3, nrow = 1)
# education, age
p4=countHist (xval=salaries$EDUCD, maintitle='Education Makeup')
p5=countHist (xval=salaries$AGE, maintitle='Age Makeup')
grid.arrange(p4,p5, ncol=2, nrow = 1)
# marital status by gender
histFacet (formulaVal= ~ salaries$MAR, xval=salaries$SEX, xtitle='', ytitle='', maintitle='Marriage by Gender')
#t <- table(salaries$SEX, salaries$MAR)
#ftable(addmargins(t))
# education by race
propHistFacet (~ salaries$RACE, salaries$EDUCD, xtitle='', ytitle='', maintitle='Education by Race')
# categorical testing
# 1-sample chi test
# X-squared = 1419, df = 5, p-value <0.0000000000000002
# indicates null hypothesis is rejected and there is a difference in edu levels
# edu <- chisq.test(x = table(salaries$EDUCD))
#2-sample chi test
# t-test to see if education levels are different between races
#t= table(salaries$EDUCD, salaries$RACE)
chi = chisq.test(x =table(salaries$EDUCD, salaries$RACE))
contrib <- 100*chi$residuals^2/chi$statistic
print (chi)
#round(contrib, 4)  # contributions table
# visualize Pearson residuals
suppressPackageStartupMessages(library(corrplot))
corrplot(chi$residuals,
#mar=c(0,0,5,0),
#number.cex=0.75,
#title = 'Pearson Residuals plot',
is.cor = FALSE)
#corrplot(contrib, is.cor = FALSE) # Visualize the contribution
#s <- subset(x = salaries, subset = EDUCD %in% c("BA", "Adv"), select=c(EDUCD, RACE, INCWAGE))
#t = table (s$RACE, s$EDUCD)
#chisq.test(x = t)
# educ by gender
histFacet (formulaVal= ~ salaries$SEX, xval=salaries$EDUCD, xtitle='', ytitle='', maintitle='Education by Gender')
# sex, age and education
#t <- table(salaries$SEX, salaries$AGE, salaries$EDUCD)
#ftable(addmargins(t))
chi = chisq.test(x =table(salaries$SEX, salaries$EDUCD))
contrib <- 100*chi$residuals^2/chi$statistic
print (chi)
# visualize Pearson residuals
corrplot(chi$residuals, is.cor = FALSE)
par(mfrow=c(1, 1))
options(scipen=999) # don't want scientific notation for plots
h=hist(salaries$INCWAGE
,main = " "
,ylab = "Frequency"
,xlab = "Income (2016)",
col = "lightblue",
labels = FALSE,
xlim=c(0,800000), ylim=c(0,8000),
cex.lab=1, cex.axis=.75,
breaks=15)
text(x=h$mids, y=h$counts, labels=h$counts,cex=.75,pos=3) # count labels
options( scipen = 20, digits=4 )  # reenable it
showStats (df = salaries$INCWAGE)
#### Income by Gender
qvals = seq(0.05,0.95, by=0.05) # quantiles for the given probabilities
#qvals = seq(0, 1, by=0.05)
# Get income quantiles
finc = quantile(incomeF, probs=qvals)        # all females
fincEd = quantile(incomeColF, probs=qvals)   # college females
fincomeNo = quantile(incomeNoF, probs=qvals) # < college
minc = quantile(incomeM , probs=qvals)       # male income
mincEd = quantile(incomeColM, probs=qvals)   # colleged males
mincomeNo = quantile(incomeNoM, probs=qvals) # < college
# Find range of values
yrange = range(c(minc, finc))
# Using quantiles is a way to normalize the characteristics of a population between 0 and 1
# which facilitates comparisons between 2 populations while ignoring scale problems.
# High: last decile (q0.90), Middle: q0.90 − q0.95, Upper middle: q0.95 − q0.99
# really rich last centile (>= q0.99)
plotIncomes <- function(fIncome, fc, mIncome, mc, mtitle) {
plot(y=qvals, x=fIncome,
type="b",  # both points and lines
pch=8,     # plotting character
col=fc,
xlim=yrange, ylab="Cumulative Proportion", xlab="Income (2016)",
main= paste('CDF Plot\n',mtitle))
lines(y=qvals, mIncome, pch=18, col=mc, type="b", lty=2) # male
}
par(mfrow=c(1, 1))
# female vs male, general
plotIncomes (fIncome =finc, fc='red', mIncome=minc, mc='blue',
mtitle='Income (Females vs Males, General Population)')
legend(x="bottomright", y=95,
legend=c('F', 'M'),
col= c('red', 'blue'),
pch = c(8, 18),
lty=1:2, cex=0.8)
# with and w/o college
plotIncomes (fIncome=fincEd, fc='hotpink', mIncome=mincEd, mc='darkblue',
mtitle='Income (Females vs. Males ~ Education)')
lines(y=qvals, fincomeNo, pch=8, col="orange", type="b", lty=2)  # females none
lines(y=qvals, mincomeNo, pch=18, col="purple", type="b", lty=2)  # males none
lines(y=qvals, minc, col="darkgreen", type="b", lty=2) # all men
legend(x="bottomright", y=95,
legend=c("F (BS+)", "M (BS+)", "F (<BS)", "M (<BS)", "M (All)"),
col=c("hotpink","darkblue", "orange", "purple", "darkgreen"),
pch = c(8, 18, 8, 18, 1),
lty=1:2, cex=0.8)
# t-test for college aged (26 -60)
sal = salaries[salaries$AGE %in% c("26-40", "41-60"),]
sal = sal[sal$EDUCD %in% c('Adv', 'BA'),]
addmargins(with(sal, table(sal$SEX, sal$EDUCD)))
fi = sal[sal$SEX == 'Female',]
mi = sal[sal$SEX == 'Male',]
# normality testing
#library("car")
# qqPlot(fi$INCWAGE)
# p-value > 0.05 implies the distribution are not significantly different from normal dist (i.e normal distribtion)
#shapiro.test(fi$INCWAGE)
#ttest <- t.test(fi$INCWAGE, mi$INCWAGE)
print(t.test(mi$INCWAGE, fi$INCWAGE))
#college women vs all men
ttest= t.test(fi$INCWAGE, incomeM)
print('Comparison: college Women vs. all Men')
#writeLines(paste(ttest$method, "   t: ", ttest$statistic, " pvalue: ", ttest$"p.value"))
print (ttest)
#### income by race
par(mfrow=c(1, 1))
boxPlot (df=salaries, xval=salaries$RACE, yval= salaries$INCWAGE,
xtitle='', ytitle=' ', maintitle = 'Incomes by Race')
#one-way ANOVA for all races against income
# lm vs aov. not equivalent?
# aov does sequential sum of squares (Type I); lm does adjusted sum of squares (Type II).
fit <- aov(salaries$INCWAGE ~ salaries$RACE)
summary(fit)
# Perform multiple pairwise-comparison, to determine if the mean difference between specific
# pairs of group are statistically significant.
print(TukeyHSD(fit))
#### colleged educated asians vs colleged educated whites
sal = salaries[salaries$AGE %in% c("26-40", "41-60"),]
sal = sal[sal$EDUCD %in% c('Adv', 'BA'),]
sal = sal[sal$RACE %in% c('Asian', 'White'),]
table(sal$RACE)
addmargins(with(sal, table(sal$RACE, sal$EDUCD)))
asianm = sal[sal$RACE == 'Asian' & sal$SEX == 'Male',]
whitem = sal[sal$RACE == 'White' & sal$SEX == 'Male',]
print(t.test(asianm$INCWAGE, whitem$INCWAGE))
#### all asians vs all educated whites
sal = salaries[salaries$RACE %in% c('Asian', 'White'),]
#table(sal$RACE)
asian = sal[sal$RACE == 'Asian',]
white = sal[sal$RACE == 'White',]
print(t.test(asian$INCWAGE, white$INCWAGE))
#### income by marital status
par(mfrow=c(1, 1))
boxPlot (df=salaries, xval=salaries$MAR, yval= salaries$INCWAGE,
xtitle='', ytitle=' ', maintitle = 'Incomes by Marital Status')
#table(salaries$MAR)
fit <- aov(salaries$INCWAGE ~ salaries$MAR)
print(summary(fit))
print(fit$coefficients)
#### income by region
boxPlot (df=salaries, xval=salaries$REGION, yval= salaries$INCWAGE,
xtitle='', ytitle=' ', maintitle = 'Incomes by Region')
#table(salaries$REGION)
# f = lm (salaries$INCWAGE ~ salaries$REGION)
# Anova(f)
# s = summary(f)
# same results as below but summary has more detail, R2, etc..
fit <- aov(salaries$INCWAGE ~ salaries$REGION)
print(summary(fit))
print(fit$coefficients)
####  income given age
p1= boxPlot (df=salaries, xval=salaries$AGE, yval= salaries$INCWAGE,
xtitle='', ytitle=' ', maintitle = 'Incomes by Age')
# scatter plot
p2 = ggplot(salariesOrg,
aes(x=jitter(as.numeric(salariesOrg$AGE)), y=salariesOrg$INCWAGE,
color=salaries$AGE)) +
labs(title="Income by Age", x ="", y = "")+
geom_point(show.legend=FALSE) +   # scatter
#regression line
#https://stackoverflow.com/questions/30208670/r-stat-smooth-groups-x-axis
theme(plot.title = element_text(hjust = 0.5, face="bold")) +
geom_smooth(color='red') # Loess method
grid.arrange(p1,p2, ncol=2, nrow = 1)
#table(salaries$AGE)
fit <- aov(salaries$INCWAGE ~ salaries$AGE)
print(summary(fit))
print(fit$coefficients)
model1 = lm(log(INCWAGE) ~ AGE + SEX + RACE, data = salaries)
summary (model1)
# sames as model1
#model2 = glm(log10(INCWAGE) ~ AGE + SEX + MAR + REGION + RACE, data = salaries, family=gaussian)
model2 = lm(log(INCWAGE) ~ AGE + SEX + RACE + EDUCD, data = salaries)
summary (model2)
model3 = lm(log(INCWAGE) ~ AGE + SEX + RACE + EDUCD + MAR, data = salaries)
summary (model3)
model4 = lm(log(INCWAGE) ~ AGE + SEX + RACE + EDUCD + MAR + REGION, data = salaries)
summary (model4)
anova(model1, model2, model3, model4)
anova(model2, model3)
summary(model3)$coefficient
model5 = lm(log(INCWAGE) ~ AGE + SEX + EDUCD + MAR, data = salaries)
summary (model5)
anova(model3, model5)
# these are equivalent?
model1 = lm(log(INCWAGE) ~ AGE + SEX + RACE, data = salaries)
model2 = glm(log(INCWAGE) ~ AGE + SEX + RACE, data = salaries, family=gaussian)
anova(model1, model2, model3)
poverty <- glm(POVPIP ~ AGE2 + SEX + EDUCD + HICOV + RACE,
data=salaries, family="binomial",
)
#coefficients in regression explain how much a variables contribute to the log odds of the response
#  transforming the log-odds to odds for easier interpretation
poverty.tab <-  coef(summary(poverty))
poverty.tab[, "Estimate"] <- exp(coef(poverty))
poverty.tab
suppressPackageStartupMessages(library(effects))
plotEffect <- function(ef, mtitle='', ytitle='', xtitle='', cName) {
plot(ef, cName,
main = mtitle, xlab = ytitle, ylab = xtitle)
}
eff = allEffects(poverty)
#summary(eff)
#plot(eff)  # too squished
plotEffect(eff,cName= 'AGE2', mtitle = 'AGE2 effect plot', xtitle = 'Poverty', ytitle = 'Age')
plotEffect(eff,cName='SEX', mtitle = 'SEX effect plot', xtitle = 'Poverty', ytitle = 'Gender')
plotEffect(eff, cName='EDUCD',mtitle = 'EDUCD effect plot', xtitle = 'Poverty', ytitle = 'Education')
plotEffect(eff, cName='HICOV', mtitle = 'HICOV effect plot', xtitle = 'Poverty', ytitle = 'Health Coverage')
plotEffect(eff, cName='RACE', mtitle = 'RACE effect plot', xtitle = 'Poverty', ytitle = 'Race')
# remove global environment
rm(list = ls())
showCode = TRUE
fileName = '/data/GlobalTemperatures.csv'
skipcols =c ('LandAverageTemperatureUncertainty','LandMaxTemperatureUncertainty',
'LandMinTemperatureUncertainty','LandAndOceanAverageTemperatureUncertainty',
'LandMinTemperature')
globaltemps <- read.csv(fileName)
# remove global environment
rm(list = ls())
showCode = TRUE
fileName = 'data/GlobalTemperatures.csv'
skipcols =c ('LandAverageTemperatureUncertainty','LandMaxTemperatureUncertainty',
'LandMinTemperatureUncertainty','LandAndOceanAverageTemperatureUncertainty',
'LandMinTemperature')
globaltemps <- read.csv(fileName)
globaltemps [ , skipcols] <- list(NULL)  # delete these columns
globaltemps$dt = as.Date(globaltemps$dt) # convert dt to Date object
# filter by dates
library(dplyr)
globaltemps <- globaltemps %>%
filter(dt >= as.Date("1850-01-01") & dt <= as.Date("2015-12-01"))
dim (globaltemps) # show its dimensions
# supporess library load warning messages
shhh <- suppressPackageStartupMessages
shhh (library (grid))
shhh (library(tidyr))
shhh (library(ggplot2))
shhh (library(tidyverse) )     # data manipulation and visualization
shhh (library(lubridate) )     # easily work with dates and times
shhh (library(fpp2))          # working with time series data
shhh (library(zoo))           # working with time series data
##### helper function to plot mulitple plots on the same panel (i.e. similiar to subplots)
multiplot <- function(..., plotlist=NULL, cols) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# Make the panel
plotCols = cols                          # Number of columns of plots
plotRows = ceiling(numPlots/plotCols) # Number of rows needed, calculated from # of cols
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(plotRows, plotCols)))
vplayout <- function(x, y)
viewport(layout.pos.row = x, layout.pos.col = y)
# Make each plot, in the correct location
for (i in 1:numPlots) {
curRow = ceiling(i/plotCols)
curCol = (i-1) %% plotCols + 1
print(plots[[i]], vp = vplayout(curRow, curCol ))
}
}
#### Plot time series for each variable
plotIndividualPlots <- function(startDt="1850-01-01", endDt="2015-12-01") {
ss <- subset(globaltemps, dt >= as.Date(startDt) & dt <= as.Date(endDt))
p1 <- ggplot(data = ss, aes(x = dt, y = LandAverageTemperature))+
geom_line(color = "green", size = 1) +
ggtitle(paste('LandAverageTemperature', startDt, '-', endDt)) +
xlab('date') + ylab('temperature')
p2 <- ggplot(data = ss, aes(x = dt, y = LandMaxTemperature))+
geom_line(color = "orange", size = 1)+
ggtitle(paste('LandMaxTemperature', startDt, '-', endDt)) +
xlab('date') + ylab('temperature')
p3 <- ggplot(data = ss, aes(x = dt, y = LandAndOceanAverageTemperature))+
geom_line(color = "blue", size = 1)+
ggtitle(paste('LandAndOceanAverageTemperature', startDt, '-', endDt)) +
xlab('date') + ylab('temperature')
multiplot(p1, p2, p3, cols=2)
}
#### time series plot
plotTimeSeries <- function(startDt="1850-01-01", endDt="2015-12-01", colName=NULL) {
ss <- subset(globaltemps, dt >= as.Date(startDt) & dt <= as.Date(endDt))
df <- ss %>%
select(dt, LandAverageTemperature, LandMaxTemperature,LandAndOceanAverageTemperature) %>%
gather(key = "variable", value = "value", -dt)
p <- ggplot(df, aes(x = dt, y = value)) +
geom_line(aes(color = variable), size = 1) +
scale_color_manual(values = c("blue", "green", "orange")) +
ggtitle(paste('Temperatures', startDt, '-', endDt)) +
xlab('date') + ylab('temperature')
p + theme(plot.title = element_text(color="black", size=10, face="bold", hjust=0.5),
axis.title.x = element_text(color="black", size=8),
axis.title.y = element_text(color="black", size=8)) +
#theme(legend.position = "none") # hides the legend +
theme(legend.position="bottom")
}
####  functions to plot moving average
plotMovingAvgAll <- function(startDt="1850-01-01", endDt="2015-12-01", kval=121) {
ss <- subset(globaltemps, dt >= as.Date(startDt) & dt <= as.Date(endDt))
temp.zoo <- zoo(ss$LandAverageTemperature, ss$dt)
temp2.zoo <- zoo(ss$LandMaxTemperature, ss$dt)
temp3.zoo <- zoo(ss$LandAndOceanAverageTemperature, ss$dt)
# rolling averaage
m.av <- rollmean(temp.zoo, k=kval, fill=NA)
ss$LandAverageTemperature.ma = coredata(m.av)
#m2.av<-rollmean(temp2.zoo,121,fill=list(NA,NULL,NA))
m2.av <- rollmean(temp2.zoo, k=kval, fill=NA)
ss$LandMaxTemperature.ma = coredata(m2.av)
m3.av <- rollmean(temp3.zoo, k=kval, fill=NA)
ss$LandAndOceanAverageTemperature.ma = coredata(m3.av)
# now remove thse columns prior to plotting
ss <- subset(ss, select = -c(LandAverageTemperature, LandMaxTemperature,
LandAndOceanAverageTemperature))
# now plot
shhh (library(reshape))
ss.long <- melt(ss, id.vars="dt")
p = ggplot(data = ss.long, aes(dt, value, color=variable), na.rm=TRUE) +
geom_line(na.rm=TRUE)+
xlab('date') + ylab('temperature')
p + theme(plot.title = element_text(color="black", size=10, face="bold", hjust=0.5),
axis.title.x = element_text(color="black", size=8),
axis.title.y = element_text(color="black", size=8)) +
theme(legend.position="bottom")
}
# plot a single moving average with only moving average data
plotMovingAvg <- function(startDt="1850-01-01", endDt="2015-12-01", colName=NULL, kval=121) {
ss <- subset(globaltemps, dt >= as.Date(startDt) & dt <= as.Date(endDt))
tempdf <- ss %>%
select(dt, temps = colName) %>%
mutate(ma10 = rollmean(temps, k = kval, fill = NA))
# now plot
tempdf %>%
gather(metric, value, ma10) %>%
ggplot(aes(dt, value, color = metric), na.rm=TRUE) +
geom_line(na.rm=TRUE) +
ggtitle(paste(colName[1], startDt,  "-", endDt)) +
xlab("date") + ylab("temperature")
}
# plot a single moving average and includes the original data
plotMovingAvg2 <- function(startDt="1850-01-01", endDt="2015-12-01", colName=NULL, kval=121) {
s = as.Date(startDt)
year <- as.numeric(format(s,'%Y'))
ss <- subset(globaltemps, dt >= s & dt <= as.Date(endDt))
temps.ts <- ss %>%
select(temp = colName) %>%
ts(start = c(year, 1), frequency = 12)  # convert to time series
head(temps.ts, 12)
# now plot
p = autoplot(temps.ts, series = "LandAverageTemperature") +
autolayer(ma(temps.ts, kval), series = "10 yr MA", na.rm=TRUE) +
ggtitle(paste('Temperatures:', startDt,  "-", endDt)) +
xlab("date") + ylab("temperature")
p + theme(plot.title = element_text(color="black", size=10, face="bold", hjust=0.5),
axis.title.x = element_text(color="black", size=8),
axis.title.y = element_text(color="black", size=8)) +
theme(legend.position="bottom")
}
###
firstOrderDiffPlot <- function(startDt="1850-01-01", endDt="2015-12-01", colName=NULL) {
s = as.Date(startDt)
year <- as.numeric(format(s,'%Y'))
ss <- subset(globaltemps, dt >= s & dt <= as.Date(endDt))
ts1 <- ss %>%
select(temp = colName) %>%
ts(start = c(year, 1), frequency = 12)  # convert to time series
plot(diff(ts1), xlab = "date",  ylab="temperature", main=colName[1])
#plot(diff(log(ts1)))
return(diff(ts1))
}
head(globaltemps, 3)
tail (globaltemps, 3)
plotTimeSeries()
plotIndividualPlots()
# first 10 years
plotTimeSeries(endDt = '1860-01-01')
# last 10 years
plotTimeSeries(startDt = '2005-01-01')
plotMovingAvg(colName=c('LandAverageTemperature'))
plotMovingAvg(colName=c('LandMaxTemperature'))
plotMovingAvg(colName=c('LandAndOceanAverageTemperature'))
plotMovingAvgAll()
ts1 = firstOrderDiffPlot (colName=c('LandAverageTemperature'))
ts2= firstOrderDiffPlot (colName=c('LandMaxTemperature'))
ts3=firstOrderDiffPlot (colName=c('LandAndOceanAverageTemperature'))
firstOrderDiff <- data.frame(ts1, ts2, ts3)
names(firstOrderDiff) <- c("LandAverageTemperature", "LandMaxTemperature", "LandAndOceanAverageTemperature")
df = subset(globaltemps, select = -c(dt))
cor(df)
cor(firstOrderDiff)
ggAcf(globaltemps$LandAverageTemperature)
ggAcf(globaltemps$LandMaxTemperature)
ggAcf(globaltemps$LandAndOceanAverageTemperature)
